import os
from pathlib import Path

import torch
from torch._C import _LinAlgError

from dptb.postprocess.bandstructure.band import Band
from dptb.utils.tools import j_loader
from dptb.nn.build import build_model
from dptb.data import build_dataset
import numpy as np

rootdir = os.path.join(Path(os.path.abspath(__file__)).parent, "data")

model = build_model(checkpoint=f"{rootdir}/e3_band/ref_model/nnenv.ep1474.pth")


# build the dataset from the model
dataset = build_dataset.from_model(
    model=model,
    root=f"{rootdir}/e3_band/data",
    prefix="Si64"
)

normal_jdata = {
        "task_options": {
            "task": "band",
            "kline_type":"abacus",
            "kpath":[[0.0000000000,   0.0000000000,   0.0000000000,   2],
                     [0.5000000000,   0.0000000000,   0.0000000000,   1],
                    ],
            "klabels":["G","X","Y","G","Z","R_2","G","T_2","U_2","G","V_2"],
            "nel_atom":{"Si":4},
            "E_fermi":0.0,
            "emin":-7,
            "emax":18
        },
        "device": "cuda"
    }


def test_normal_band():
    jdata = normal_jdata

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    jdata["task_options"]["eig_solver"] = 'torch'
    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])

    expected_value_k1 = np.array(
        [-6.0096564 , -5.0338855,  -5.0055947,  -4.954237  , -4.9074845, -4.883795,
        -4.7791314 , -4.097587 ,  -4.0859933,  -4.051028  , -4.0208554, -4.00457,
        -3.973259  , -3.950148 ,  -3.9178817,  -3.8631852 , -3.8525665, -3.823716,
        -3.7372575 , -3.655709 ,  -3.6095102,  -3.581036  , -3.4909313, -1.981091,
        -1.9454596 , -1.9328254,  -1.8893764,  -1.8372127 , -1.7727417, -1.748343,
        -1.737101  , -1.6879504,  -1.6690412,  -1.6458144 , -1.616    , -1.600752,
        -1.5735056 , -1.563564 ,  -1.5440646,  -1.5045857 , -1.4744754, -0.922483,
        -0.88381207, -0.8783176,  -0.8186352,   0.42469445,  0.4670117,  0.472433,
        0.5039711 ,  0.5181163,   0.5440327,   0.55107397,  0.5844226,  0.617197,
        0.63977736,  0.6930817,   0.7293764,   2.0600061 ,  2.089843 ,  2.123191,
        2.1546576 ,  2.1641004,   2.1832418,   2.197523  ,  2.222315 ,  2.236770,
        2.2482247 ,  2.2684567,   2.2842975,   2.3243759 ,  2.3360462,  2.338826,
        2.3495471 ,  2.372454 ,   2.3802779,   2.393155  ,  2.4131613,  2.443029,
        2.4666605 ,  2.4841325,   2.5127547,   2.5478191 ,  2.565719 ,  2.584698,
        2.6235318 ,  2.6704693,   2.727618 ,   3.1820045 ,  3.1961656,  3.229202,
        3.2461119 ,  3.2534797,   3.2905989,   4.072351  ,  4.08625  ,  4.131282,
        4.173143  ,  4.198613 ,   4.212659 ,   4.241462  ,  4.2685633,  4.280017,
        4.292667  ,  4.3201165,   4.3511877,   4.636358  ,  4.681469 ,  4.694266,
        4.7299924 ,  4.7549453,   4.7802095,   4.803235  ,  4.8189464,  4.836169,
        4.863792  ,  4.8882546,   4.8932276,   4.9308734 ,  4.967894 ,  4.983176,
        4.991623  ,  5.035114 ,   5.052211 ,   5.0683546 ,  5.1715884,  6.395539,
        6.4353538 ,  6.531721 ,   8.273292 ,   8.37032   ,  8.453876 ,  8.469227,
        8.535843  ,  8.561851 ,   8.764825 ,   8.786985  ,  8.791611 ,  8.8369,
        9.180292  ,  9.207707 ,   9.303252 ,   9.350846  ,  9.386947 ,  9.434174,
        9.501014  ,  9.539493 ,   9.604637 ,   9.643457  ,  9.951732 , 10.014375,
        10.038329  , 10.061942 ,  10.145551 ,  10.208967  , 10.219724 , 10.22388,
        10.233849  , 10.258403 ,  10.304841 ,  10.357744  , 11.450651 , 11.499816,
        11.551985  , 11.584442 ,  11.645533 ,  11.666858  , 11.7426195, 11.744575,
        11.805281  , 11.861289 ,  11.879428 ,  11.940457  , 11.970382 , 12.021234,
        12.068419  , 12.152998 ,  12.169574 ,  12.199243  , 12.262277 , 12.290455,
        12.348598  , 12.409355 ,  12.420774 ,  12.4436655 , 12.473849 , 12.507301,
        12.733131  , 12.7952   ,  12.84661  ,  12.855635  , 12.906467 , 12.919459,
        12.963909  , 12.992256 ,  12.994178 ,  13.054141  , 13.0773945, 13.112909,
        13.415406  , 13.448439 ,  13.46248  ,  13.488923  , 13.521968 , 13.617435,
        13.627213  , 13.64451  ,  13.666385 ,  13.688283  , 13.753086 , 13.769258,
        13.970466  , 14.067394 ,  14.1050205,  14.14853   , 14.183759 , 14.205458,
        14.236868  , 14.2773905,  14.308015 ,  14.355685  , 14.38019  , 14.447923,
        14.61318   , 14.701408 ,  14.7237835,  14.741733  , 14.808051 , 14.871398,
        14.944539  , 15.000103 ,  15.059116 ,  15.087115  , 15.122112 , 15.134912,
        15.227328  , 15.253422 ,  15.275813 ,  15.282257  , 15.38827  , 15.46996,
        15.489255  , 15.520848 ,  15.541087 ,  15.674108  , 15.68091  , 15.780937,
        17.118692  , 17.165403 ,  17.189184 ,  17.237967  , 17.266447 , 17.304241,
        18.252378  , 18.274855 ,  18.2909   ,  18.328382  ],
        dtype=np.float32)
    # torch diagonalization test
    print(eigenstatus["eigenvalues"][0])
    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=1e-4)
    
    
    jdata["task_options"]["eig_solver"] = 'numpy'
    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])
    # numpy diagonalization test
    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=1e-4)

def test_band_false_overlap():

    jdata = normal_jdata

    # torch diagnalization test
    jdata["task_options"]["eig_solver"] = 'torch'
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/false_overlaps.h5"

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)
    try:
        bcal.get_bands(data=dataset[0],
                       kpath_kwargs=jdata["task_options"])
    except _LinAlgError as e:
        pass
    else:
        raise RuntimeError("false_overlap function normally.")

    # numpy diagnalization test
    jdata["task_options"]["eig_solver"] = 'numpy'
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/false_overlaps.h5"

    try:
        bcal.get_bands(data=dataset[0],
                       kpath_kwargs=jdata["task_options"])
    except np.linalg.LinAlgError as e:
        pass
    else:
        raise RuntimeError("false_overlap function normally.")



def test_band_override_overlap():
    jdata = normal_jdata
    jdata["task_options"]["eig_solver"] = 'torch'
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/data/Si64.0/overlaps.h5"

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])

    expected_value_k1 = np.array(
        [-6.008095,  -5.031095,   -5.004015,   -4.953208,   -4.907815,   -4.882412,
        -4.779607 ,  -4.0959287,  -4.0848494,  -4.049918 ,  -4.0216174,  -4.004477,
        -3.973394 ,  -3.9506776,  -3.9187963,  -3.8636186,  -3.85285  ,  -3.8235178,
        -3.7373385,  -3.6568942,  -3.6099088,  -3.5816267,  -3.4912457,  -1.9807329,
        -1.9450418,  -1.932574 ,  -1.8891817,  -1.8371193,  -1.7724333,  -1.7482408,
        -1.7372181,  -1.6878022,  -1.6690543,  -1.6458186,  -1.6161085,  -1.600822,
        -1.5734446,  -1.5635738,  -1.5439721,  -1.5044597,  -1.4737046,  -0.9223954,
        -0.8838203,  -0.8783657,  -0.8186851,   0.4246311,   0.4670068,   0.4725148,
        0.50397474,  0.51809394,  0.5440366 ,  0.5511219 ,  0.5844595 ,  0.6172212,
        0.6398487 ,  0.69302744,  0.7292962 ,  2.0595353 ,  2.0895908 ,  2.1228967,
        2.1542196 ,  2.1639628 ,  2.1832051 ,  2.1972337 ,  2.2223167 ,  2.2363396,
        2.2482228 ,  2.2684832 ,  2.2842638 ,  2.3244846 ,  2.336087  ,  2.3388956,
        2.349792  ,  2.372692  ,  2.3805199 ,  2.393328  ,  2.4131742 ,  2.4432936,
        2.4667544 ,  2.4840155 ,  2.5129118 ,  2.5479286 ,  2.5656433 ,  2.5845306,
        2.623527  ,  2.6707656 ,  2.7274592 ,  3.181819  ,  3.195838  ,  3.229051,
        3.2456234 ,  3.2528741 ,  3.2900593 ,  4.0728025 ,  4.0863934 ,  4.131732,
        4.1736016 ,  4.1989255 ,  4.213269  ,  4.2416954 ,  4.268524  ,  4.2801504,
        4.2925696 ,  4.3205266 ,  4.3503823 ,  4.636645  ,  4.681289  ,  4.694695,
        4.7308254 ,  4.7544928 ,  4.780114  ,  4.8040886 ,  4.8196745 ,  4.8360157,
        4.864073  ,  4.8891044 ,  4.8937297 ,  4.9318347 ,  4.968329  ,  4.983844,
        4.9920344 ,  5.0359426 ,  5.0536094 ,  5.0687466 ,  5.1717043 ,  6.394471,
        6.4338484 ,  6.5293283 ,  8.276592  ,  8.380884  ,  8.447056  ,  8.473681,
        8.529468  ,  8.562735  ,  8.762372  ,  8.79363   ,  8.801646  ,  8.845818,
        9.183474  ,  9.207875  ,  9.30513   ,  9.348331  ,  9.391141  ,  9.4358635,
        9.496642  ,  9.525107  ,  9.598311  ,  9.641594  ,  9.958082  , 10.027386,
        10.043771 ,  10.07072  ,  10.146671 ,  10.205848 ,  10.216664 ,  10.22647,
        10.241612 ,  10.264144 ,  10.313171 ,  10.364483 ,  11.450259 ,  11.510343,
        11.564525 ,  11.585111 ,  11.654714 ,  11.674637 ,  11.741146 ,  11.753364,
        11.81302  ,  11.85706  ,  11.880961 ,  11.928003 ,  11.973179 ,  12.018597,
        12.062834 ,  12.155915 ,  12.179601 ,  12.20718  ,  12.264002 ,  12.292319,
        12.336384 ,  12.405779 ,  12.423485 ,  12.444018 ,  12.471476 ,  12.502642,
        12.756426 ,  12.789255 ,  12.835665 ,  12.858519 ,  12.910468 ,  12.921415,
        12.953137 ,  12.980316 ,  12.993179 ,  13.060203 ,  13.072096 ,  13.118805,
        13.427122 ,  13.452212 ,  13.464347 ,  13.494626 ,  13.529535 ,  13.616168,
        13.62507  ,  13.636626 ,  13.660066 ,  13.683441 ,  13.743814 ,  13.758125,
        13.969971 ,  14.070905 ,  14.113616 ,  14.1496525,  14.188191 ,  14.209014,
        14.237033 ,  14.294817 ,  14.302413 ,  14.34762  ,  14.378521 ,  14.438198,
        14.611998 ,  14.71119  ,  14.731126 ,  14.755031 ,  14.805742 ,  14.870657,
        14.9520035,  15.01525  ,  15.057849 ,  15.090751 ,  15.126563 ,  15.142418,
        15.213072 ,  15.28235  ,  15.294191 ,  15.310926 ,  15.395022 ,  15.468085,
        15.523431 ,  15.53465  ,  15.57386  ,  15.676224 ,  15.706727 ,  15.811175,
        17.113901 ,  17.16663  ,  17.195698 ,  17.244364 ,  17.281693 ,  17.314123,
        18.265083 ,  18.284634 ,  18.333534 ,  18.368855],
        dtype=np.float32)

    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=1e-4)

    jdata["task_options"]["eig_solver"] = 'numpy'
    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])
    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=1e-4)



