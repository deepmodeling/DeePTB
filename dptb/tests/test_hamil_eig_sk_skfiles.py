import pytest
import logging
import pickle
import numpy as np
import torch
from dptb.sktb.struct_skhs import SKHSLists
from dptb.sktb.skIntegrals import SKIntegrals
from dptb.structure.structure import BaseStruct
from dptb.hamiltonian.hamil_eig_sk_crt import HamilEig
@pytest.fixture(scope='session', autouse=True)
def root_directory(request):
        return str(request.config.rootdir)

all_bonds = torch.tensor([[ 7,  0,  7,  0,  0,  0,  0],
                      [ 5,  1,  5,  1,  0,  0,  0],
                      [ 7,  0,  5,  1, -2,  0,  0],
                      [ 7,  0,  7,  0, -1,  0,  0],
                      [ 7,  0,  5,  1, -1,  0,  0],
                      [ 7,  0,  5,  1,  1,  0,  0],
                      [ 7,  0,  5,  1, -1,  1,  0],
                      [ 7,  0,  7,  0,  0,  1,  0],
                      [ 7,  0,  5,  1,  0,  1,  0],
                      [ 7,  0,  7,  0,  1,  1,  0],
                      [ 7,  0,  5,  1,  1,  1,  0],
                      [ 7,  0,  5,  1,  0,  2,  0],
                      [ 7,  0,  5,  1,  1,  2,  0],
                      [ 7,  0,  5,  1,  0,  0,  0],
                      [ 7,  0,  5,  1, -1, -1,  0],
                      [ 7,  0,  5,  1, -2, -1,  0],
                      [ 7,  0,  5,  1,  0, -1,  0],
                      [ 5,  1,  5,  1,  1,  1,  0],
                      [ 5,  1,  5,  1,  0, -1,  0],
                      [ 5,  1,  5,  1, -1,  0,  0]])
               

hoppings=[torch.tensor([[-0.671363,  0.      ,  0.      ,  0.      ],
                        [ 0.      , -0.261222, -0.      , -0.      ],
                        [ 0.      , -0.      , -0.261222, -0.      ],
                        [ 0.      , -0.      , -0.      , -0.261222]]),
                 torch.tensor([[-0.339811,  0.      ,  0.      ,  0.      ],
                        [ 0.      , -0.131903, -0.      , -0.      ],
                        [ 0.      , -0.      , -0.131903, -0.      ],
                        [ 0.      , -0.      , -0.      , -0.131903]]),
                 torch.tensor([[-5.01152195e-04, -1.48623340e-04, -0.00000000e+00,
                         -7.72269451e-04],
                        [-1.68177624e-04,  5.84544432e-05,  0.00000000e+00,
                         -2.87254353e-04],
                        [ 0.00000000e+00,  0.00000000e+00,  1.13736575e-04,
                          0.00000000e+00],
                        [-8.73876477e-04, -2.87254353e-04,  0.00000000e+00,
                         -1.37888068e-03]]),
                 torch.tensor([[-0.01799905, -0.        , -0.        ,  0.02771481],
                        [ 0.        , -0.00573914,  0.        ,  0.        ],
                        [ 0.        ,  0.        , -0.00573914,  0.        ],
                        [-0.02771481,  0.        ,  0.        ,  0.03792326]]),
                 torch.tensor([[-0.28569007, -0.17049112, -0.        , -0.29529927],
                        [-0.12286996,  0.02212606,  0.        , -0.16680055],
                        [ 0.        ,  0.        ,  0.11842841,  0.        ],
                        [-0.212817  , -0.16680055,  0.        , -0.17047861]]),
                 torch.tensor([[-5.01152426e-04, -1.48623419e-04, -0.00000000e+00,
                          7.72269831e-04],
                        [-1.68177714e-04,  5.84544698e-05,  0.00000000e+00,
                          2.87254505e-04],
                        [ 0.00000000e+00,  0.00000000e+00,  1.13736633e-04,
                          0.00000000e+00],
                        [ 8.73876911e-04,  2.87254505e-04,  0.00000000e+00,
                         -1.37888135e-03]]),
                 torch.tensor([[-0.01003859,  0.00753062, -0.        , -0.01304342],
                        [ 0.00762597, -0.00334142,  0.        ,  0.01050546],
                        [ 0.        ,  0.        ,  0.00272391,  0.        ],
                        [-0.01320857,  0.01050546,  0.        , -0.01547209]]),
                 torch.tensor([[-0.01799905, -0.02400173, -0.        ,  0.0138574 ],
                        [ 0.02400173,  0.02700766,  0.        , -0.01890637],
                        [ 0.        ,  0.        , -0.00573914,  0.        ],
                        [-0.0138574 , -0.01890637,  0.        ,  0.00517646]]),
                 torch.tensor([[-2.85690159e-01,  3.40982328e-01, -0.00000000e+00,
                         -1.71352259e-08],
                        [ 2.45739961e-01, -2.66781012e-01,  0.00000000e+00,
                          1.93577519e-08],
                        [ 0.00000000e+00,  0.00000000e+00,  1.18428459e-01,
                          0.00000000e+00],
                        [-1.23490557e-08,  1.93577519e-08,  0.00000000e+00,
                          1.18428459e-01]]),
                 torch.tensor([[-0.01799905, -0.02400173, -0.        , -0.0138574 ],
                        [ 0.02400173,  0.02700766,  0.        ,  0.01890637],
                        [ 0.        ,  0.        , -0.00573914,  0.        ],
                        [ 0.0138574 ,  0.01890637,  0.        ,  0.00517646]]),
                 torch.tensor([[-0.01003859,  0.00753062, -0.        ,  0.01304342],
                        [ 0.00762597, -0.00334142,  0.        , -0.01050547],
                        [ 0.        ,  0.        ,  0.00272391,  0.        ],
                        [ 0.01320857, -0.01050547,  0.        , -0.01547209]]),
                 torch.tensor([[-5.01152433e-04,  7.43117001e-04, -0.00000000e+00,
                         -2.57423302e-04],
                        [ 8.40888461e-04, -1.26831706e-03,  0.00000000e+00,
                          4.78757485e-04],
                        [ 0.00000000e+00,  0.00000000e+00,  1.13736635e-04,
                          0.00000000e+00],
                        [-2.91292332e-04,  4.78757485e-04,  0.00000000e+00,
                         -5.21098364e-05]]),
                 torch.tensor([[-5.01152510e-04,  7.43117133e-04, -0.00000000e+00,
                          2.57423317e-04],
                        [ 8.40888611e-04, -1.26831731e-03,  0.00000000e+00,
                         -4.78757520e-04],
                        [ 0.00000000e+00,  0.00000000e+00,  1.13736654e-04,
                          0.00000000e+00],
                        [ 2.91292350e-04, -4.78757520e-04,  0.00000000e+00,
                         -5.21098099e-05]]),
                 torch.tensor([[-0.28569013, -0.17049117, -0.        ,  0.29529931],
                        [-0.12286999,  0.02212606,  0.        ,  0.16680059],
                        [ 0.        ,  0.        ,  0.11842844,  0.        ],
                        [ 0.21281702,  0.16680059,  0.        , -0.17047861]]),
                 torch.tensor([[-1.00385882e-02, -1.50612405e-02, -0.00000000e+00,
                         -3.77911810e-10],
                        [-1.52519358e-02, -2.15374184e-02,  0.00000000e+00,
                         -6.08757424e-10],
                        [ 0.00000000e+00,  0.00000000e+00,  2.72390854e-03,
                          0.00000000e+00],
                        [-3.82696675e-10, -6.08757424e-10,  0.00000000e+00,
                          2.72390854e-03]]),
                 torch.tensor([[-0.00050115, -0.00059449, -0.        , -0.00051485],
                        [-0.00067271, -0.00077078,  0.        , -0.00076601],
                        [ 0.        ,  0.        ,  0.00011374,  0.        ],
                        [-0.00058258, -0.00076601,  0.        , -0.00054965]]),
                 torch.tensor([[-0.00050115, -0.00059449, -0.        ,  0.00051485],
                        [-0.00067271, -0.00077078,  0.        ,  0.00076601],
                        [ 0.        ,  0.        ,  0.00011374,  0.        ],
                        [ 0.00058258,  0.00076601,  0.        , -0.00054965]]),
                 torch.tensor([[-0.04062027,  0.04496145, -0.        ,  0.02595851],
                        [-0.04496145,  0.04448625,  0.        ,  0.0325172 ],
                        [ 0.        ,  0.        , -0.0118352 ,  0.        ],
                        [-0.02595851,  0.0325172 ,  0.        ,  0.00693862]]),
                 torch.tensor([[-0.04062027, -0.04496145, -0.        ,  0.02595851],
                        [ 0.04496145,  0.04448625,  0.        , -0.0325172 ],
                        [ 0.        ,  0.        , -0.0118352 ,  0.        ],
                        [-0.02595851, -0.0325172 ,  0.        ,  0.00693862]]),
                 torch.tensor([[-0.04062027, -0.        , -0.        , -0.05191701],
                        [ 0.        , -0.0118352 ,  0.        ,  0.        ],
                        [ 0.        ,  0.        , -0.0118352 ,  0.        ],
                        [ 0.05191701,  0.        ,  0.        ,  0.06326006]])]


overlaps=[torch.tensor([[1., 0., 0., 0.],
                        [0., 1., 0., 0.],
                        [0., 0., 1., 0.],
                        [0., 0., 0., 1.]]),
                 torch.tensor([[1., 0., 0., 0.],
                        [0., 1., 0., 0.],
                        [0., 0., 1., 0.],
                        [0., 0., 0., 1.]]),
                 torch.tensor([[ 3.53079307e-04,  8.42151409e-05, -0.00000000e+00,
                          4.37594663e-04],
                        [ 9.63794173e-05, -5.93863356e-05,  0.00000000e+00,
                          1.47677688e-04],
                        [ 0.00000000e+00,  0.00000000e+00, -8.78069229e-05,
                          0.00000000e+00],
                        [ 5.00802091e-04,  1.47677688e-04,  0.00000000e+00,
                          6.79548777e-04]]),
                 torch.tensor([[ 0.01159506, -0.        , -0.        , -0.02087616],
                        [ 0.        ,  0.00462289,  0.        ,  0.        ],
                        [ 0.        ,  0.        ,  0.00462289,  0.        ],
                        [ 0.02087616,  0.        ,  0.        , -0.03556381]]),
                 torch.tensor([[ 0.26658797,  0.16829329, -0.        ,  0.29149251],
                        [ 0.14515366, -0.02694488,  0.        ,  0.20319209],
                        [ 0.        ,  0.        , -0.1442579 ,  0.        ],
                        [ 0.2514135 ,  0.20319209,  0.        ,  0.20768111]]),
                 torch.tensor([[ 3.53079412e-04,  8.42151801e-05, -0.00000000e+00,
                         -4.37594850e-04],
                        [ 9.63794633e-05, -5.93863482e-05,  0.00000000e+00,
                         -1.47677772e-04],
                        [ 0.00000000e+00,  0.00000000e+00, -8.78069527e-05,
                          0.00000000e+00],
                        [-5.00802311e-04, -1.47677772e-04,  0.00000000e+00,
                          6.79549152e-04]]),
                 torch.tensor([[ 0.00672879, -0.00543813, -0.        ,  0.00941912],
                        [-0.00617136,  0.0032857 ,  0.        , -0.00928524],
                        [ 0.        ,  0.        , -0.00207514,  0.        ],
                        [ 0.01068911, -0.00928524,  0.        ,  0.01400737]]),
                 torch.tensor([[ 0.01159506,  0.01807928, -0.        , -0.01043808],
                        [-0.01807928, -0.02551713,  0.        ,  0.01740135],
                        [ 0.        ,  0.        ,  0.00462289,  0.        ],
                        [ 0.01043808,  0.01740135,  0.        , -0.00542379]]),
                 torch.tensor([[ 2.66588063e-01, -3.36586654e-01, -0.00000000e+00,
                          1.69143321e-08],
                        [-2.90307367e-01,  3.24994165e-01,  0.00000000e+00,
                         -2.35811084e-08],
                        [ 0.00000000e+00,  0.00000000e+00, -1.44257963e-01,
                          0.00000000e+00],
                        [ 1.45886807e-08, -2.35811084e-08,  0.00000000e+00,
                         -1.44257963e-01]]),
                 torch.tensor([[ 0.01159506,  0.01807928, -0.        ,  0.01043808],
                        [-0.01807928, -0.02551713,  0.        , -0.01740135],
                        [ 0.        ,  0.        ,  0.00462289,  0.        ],
                        [-0.01043808, -0.01740135,  0.        , -0.00542379]]),
                 torch.tensor([[ 0.00672879, -0.00543813, -0.        , -0.00941913],
                        [-0.00617137,  0.0032857 ,  0.        ,  0.00928524],
                        [ 0.        ,  0.        , -0.00207514,  0.        ],
                        [-0.01068912,  0.00928524,  0.        ,  0.01400738]]),
                 torch.tensor([[ 3.53079416e-04, -4.21075845e-04, -0.00000000e+00,
                          1.45864964e-04],
                        [-4.81897254e-04,  6.22707966e-04,  0.00000000e+00,
                         -2.46129608e-04],
                        [ 0.00000000e+00,  0.00000000e+00, -8.78069537e-05,
                          0.00000000e+00],
                        [ 1.66934119e-04, -2.46129608e-04,  0.00000000e+00,
                         -2.54514930e-06]]),
                 torch.tensor([[ 3.53079451e-04, -4.21075911e-04, -0.00000000e+00,
                         -1.45864969e-04],
                        [-4.81897331e-04,  6.22708099e-04,  0.00000000e+00,
                          2.46129629e-04],
                        [ 0.00000000e+00,  0.00000000e+00, -8.78069636e-05,
                          0.00000000e+00],
                        [-1.66934127e-04,  2.46129629e-04,  0.00000000e+00,
                         -2.54516183e-06]]),
                 torch.tensor([[ 0.26658803,  0.16829333, -0.        , -0.29149255],
                        [ 0.14515369, -0.02694489,  0.        , -0.20319213],
                        [ 0.        ,  0.        , -0.14425794,  0.        ],
                        [-0.25141352, -0.20319213,  0.        ,  0.2076811 ]]),
                 torch.tensor([[ 6.72878376e-03,  1.08762626e-02, -0.00000000e+00,
                          2.72903688e-10],
                        [ 1.23427235e-02,  1.93682024e-02,  0.00000000e+00,
                          5.38049339e-10],
                        [ 0.00000000e+00,  0.00000000e+00, -2.07513517e-03,
                          0.00000000e+00],
                        [ 3.09699655e-10,  5.38049339e-10,  0.00000000e+00,
                         -2.07513517e-03]]),
                 torch.tensor([[ 3.53079287e-04,  3.36860504e-04, -0.00000000e+00,
                          2.91729753e-04],
                        [ 3.85517600e-04,  3.66922346e-04,  0.00000000e+00,
                          3.93807093e-04],
                        [ 0.00000000e+00,  0.00000000e+00, -8.78069174e-05,
                          0.00000000e+00],
                        [ 3.33868035e-04,  3.93807093e-04,  0.00000000e+00,
                          2.53240029e-04]]),
                 torch.tensor([[ 3.53079358e-04,  3.36860608e-04, -0.00000000e+00,
                         -2.91729827e-04],
                        [ 3.85517723e-04,  3.66922509e-04,  0.00000000e+00,
                         -3.93807229e-04],
                        [ 0.00000000e+00,  0.00000000e+00, -8.78069372e-05,
                          0.00000000e+00],
                        [-3.33868122e-04, -3.93807229e-04,  0.00000000e+00,
                          2.53240107e-04]]),
                 torch.tensor([[ 0.03992768, -0.05072166, -0.        , -0.02928417],
                        [ 0.05072166, -0.05973485,  0.        , -0.0418134 ],
                        [ 0.        ,  0.        ,  0.01268807,  0.        ],
                        [ 0.02928417, -0.0418134 ,  0.        , -0.0114529 ]]),
                 torch.tensor([[ 0.03992768,  0.05072166, -0.        , -0.02928417],
                        [-0.05072166, -0.05973485,  0.        ,  0.0418134 ],
                        [ 0.        ,  0.        ,  0.01268807,  0.        ],
                        [ 0.02928417,  0.0418134 ,  0.        , -0.0114529 ]]),
                 torch.tensor([[ 0.03992768, -0.        , -0.        ,  0.05856833],
                        [ 0.        ,  0.01268807,  0.        ,  0.        ],
                        [ 0.        ,  0.        ,  0.01268807,  0.        ],
                        [-0.05856833,  0.        ,  0.        , -0.08387583]])]

eigenvalues =    torch.tensor([[-22.440512  , -11.348884  ,  -8.129092  ,  -8.129089  ,
          5.1896396 ,  10.006596  ,  10.006611  ,  17.140886  ],
       [-21.972958  , -10.731246  ,  -9.714745  ,  -8.937796  ,
          3.765793  ,  11.801703  ,  13.207671  ,  18.52124   ],
       [-20.74841   , -12.636986  , -10.125626  ,  -9.059458  ,
          0.57406265,  13.655142  ,  19.648283  ,  22.865177  ],
       [-19.816086  , -14.25755   , -10.590711  ,  -7.695636  ,
         -1.5068989 ,  14.108515  ,  23.002007  ,  25.57123   ],
       [-19.349743  , -13.186199  , -13.180571  ,  -6.7330685 ,
         -2.7268982 ,  16.73102   ,  22.523712  ,  27.84579   ],
       [-19.706665  , -13.371643  , -12.195641  ,  -7.433054  ,
         -1.8351332 ,  16.277023  ,  21.591076  ,  26.85312   ],
       [-20.61971   , -12.335531  , -10.980624  ,  -8.864242  ,
          0.26381382,  15.247766  ,  18.609734  ,  23.863556  ],
       [-21.564024  , -10.643907  , -10.181778  ,  -9.682335  ,
          2.6233954 ,  13.470726  ,  14.835367  ,  20.100906  ],
       [-22.213211  , -11.049823  ,  -8.931181  ,  -8.5839405 ,
          4.4804573 ,  11.079862  ,  11.544977  ,  17.76801   ],
       [-22.440512  , -11.348884  ,  -8.129092  ,  -8.129089  ,
          5.1896396 ,  10.006596  ,  10.006611  ,  17.140886  ]],
     dtype=torch.float32)
    
def test_HamilRSK(root_directory):
    structname = root_directory + '/dptb/tests/data/hBN/hBN.vasp'
    sk_file_path = root_directory + '/examples/slakos'

    proj_atom_anglr_m = {"N":["s","p"],"B":["s","p"]}
    proj_atom_neles = {"N":5,"B":3}
    CutOff = 4
    struct = BaseStruct(atom=structname,format='vasp',
        cutoff=CutOff,proj_atom_anglr_m=proj_atom_anglr_m,proj_atom_neles=proj_atom_neles)
    _, _ = struct.get_bond()
    skint = SKIntegrals(proj_atom_anglr_m=proj_atom_anglr_m,sk_file_path=sk_file_path)
    hslist = SKHSLists(skint,dtype='tensor')

    hslist.update_struct(struct)
    hslist.get_HS_list()
    hrsk = HamilEig()
    hrsk.update_hs_list(struct=struct,hoppings=hslist.hoppings,onsiteEs=hslist.onsiteEs,overlaps=hslist.overlaps,onsiteSs=hslist.onsiteSs)
    hrsk.get_hs_blocks()
    assert len(all_bonds) == len(hrsk.all_bonds)
    # assert (all_bonds - hrsk.all_bonds < 1e-6).all()
    assert len(hoppings) == len(hrsk.hamil_blocks)
    assert len(overlaps) == len(hrsk.overlap_blocks)
    assert len(hrsk.hamil_blocks) == len(hrsk.overlap_blocks)

    for i in range(len(hoppings)):
        assert (np.abs(hoppings[i] - hrsk.hamil_blocks[i].numpy()) < 1e-6).all()
        assert (np.abs(overlaps[i] - hrsk.overlap_blocks[i].numpy()) < 1e-6).all()
    
    snapase = struct.struct
    lat = snapase.cell.get_bravais_lattice()
    special_kp = lat.get_special_points()
    kpath=snapase.cell.bandpath('GMKG', npoints=120)
    xlist, high_sym_kpoints, labels = kpath.get_linear_kpoint_axis()
    klist = kpath.kpts

    HK = hrsk.hs_block_R2k(kpoints=klist, HorS='H', time_symm=True)
    SK = hrsk.hs_block_R2k(kpoints=klist, HorS='S', time_symm=True)

    hkfile = root_directory + '/dptb/tests/data/hBN_HK.pickle'
    skfile = root_directory + '/dptb/tests/data/hBN_SK.pickle'

    with open(hkfile, 'rb') as f:
        hk = pickle.load(f)
    with open(skfile, 'rb') as f:
        sk = pickle.load(f)

    assert HK.shape == SK.shape
    assert HK.shape == hk.shape
    assert SK.shape == sk.shape

    assert (np.abs(HK.numpy() - hk) < 1e-6).all()
    assert (np.abs(SK.numpy() - sk) < 1e-6).all()


    kpath=snapase.cell.bandpath('GMKG', npoints=10)
    klist = kpath.kpts

    eigks,_ = hrsk.Eigenvalues(kpoints = klist)

    assert (np.abs(eigks - eigenvalues) < 1e-4).all()


def test_HamilRSK_SplitOnsite(root_directory):
    structname = root_directory + '/dptb/tests/data/hBN/hBN.vasp'
    sk_file_path = root_directory + '/examples/slakos'

    proj_atom_anglr_m = {"N":["s","p"],"B":["s","p"]}
    proj_atom_neles = {"N":5,"B":3}
    CutOff = 4
    struct = BaseStruct(atom=structname,format='vasp',
        cutoff=CutOff,proj_atom_anglr_m=proj_atom_anglr_m,proj_atom_neles=proj_atom_neles)
    skint = SKIntegrals(proj_atom_anglr_m=proj_atom_anglr_m,sk_file_path=sk_file_path)
    hslist = SKHSLists(skint,dtype='tensor')
    hslist.update_struct(struct)
    hslist.get_HS_list()
    hrsk = HamilEig()
    hslist.onsiteEs = [torch.tensor([-0.671363, -0.261222,-0.261222,-0.261222]), torch.tensor([-0.339811, -0.131903,-0.131903,-0.131903])]
    hrsk.update_hs_list(struct=struct,hoppings=hslist.hoppings,onsiteEs=hslist.onsiteEs,overlaps=hslist.overlaps,onsiteSs=hslist.onsiteSs)
    hrsk.get_hs_blocks()
    assert len(all_bonds) == len(hrsk.all_bonds)
    # assert (all_bonds - hrsk.all_bonds < 1e-6).all()
    assert len(hoppings) == len(hrsk.hamil_blocks)
    assert len(overlaps) == len(hrsk.overlap_blocks)
    assert len(hrsk.hamil_blocks) == len(hrsk.overlap_blocks)

    for i in range(len(hoppings)):
        assert (np.abs(hoppings[i] - hrsk.hamil_blocks[i].numpy()) < 1e-6).all()
        assert (np.abs(overlaps[i] - hrsk.overlap_blocks[i].numpy()) < 1e-6).all()