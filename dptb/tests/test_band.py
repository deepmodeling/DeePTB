import os
from pathlib import Path

import torch
from torch._C import _LinAlgError

from dptb.postprocess.bandstructure.band import Band
from dptb.utils.tools import j_loader
from dptb.nn.build import build_model
from dptb.data import build_dataset
import numpy as np

rootdir = os.path.join(Path(os.path.abspath(__file__)).parent, "data")

model = build_model(checkpoint=f"{rootdir}/e3_band/ref_model/nnenv.ep1474.pth")

# build the dataset from the model
dataset = build_dataset.from_model(
    model=model,
    root=f"{rootdir}/e3_band/data",
    prefix="Si64"
)

normal_jdata = {
        "task_options": {
            "task": "band",
            "kline_type":"abacus",
            "kpath":[[0.0000000000,   0.0000000000,   0.0000000000,   20],
                    [0.5000000000,   0.0000000000,   0.0000000000,   1],
                    [0.0000000000,   0.5000000000,   0.0000000000,   20],
                    [0.0000000000,   0.0000000000,   0.0000000000,   20],
                    [0.0000000000,   0.0000000000,   0.5000000000,   1],
                    [-0.5000000000,  -0.5000000000,   0.5000000000,   20],
                    [0.0000000000,   0.0000000000,   0.0000000000,   20],
                    [0.0000000000,   -0.5000000000,   0.5000000000,   1 ],
                    [-0.5000000000,   0.0000000000,   0.5000000000, 20],
                    [0.0000000000, 0.0000000000, 0.0000000000, 20],
                    [0.5000000000, -0.5000000000, 0.0000000000, 1]
                    ],
            "klabels":["G","X","Y","G","Z","R_2","G","T_2","U_2","G","V_2"],
            "nel_atom":{"Si":4},
            "E_fermi":0.0,
            "emin":-7,
            "emax":18
        },
        "device": "cuda"
    }


def test_normal_band():
    jdata = normal_jdata

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])

    expected_value_k1 = np.array(
        [-6.019677639007568359e+00, -5.041236400604248047e+00, -5.010667800903320312e+00, -4.958186626434326172e+00,
         -4.908330917358398438e+00, -4.887556076049804688e+00, -4.780120849609375000e+00, -4.101103305816650391e+00,
         -4.085852622985839844e+00, -4.052774906158447266e+00, -4.021245002746582031e+00, -4.006594657897949219e+00,
         -3.973644971847534180e+00, -3.951156139373779297e+00, -3.916678905487060547e+00, -3.862923145294189453e+00,
         -3.851523637771606445e+00, -3.824561595916748047e+00, -3.737478017807006836e+00, -3.653725862503051758e+00,
         -3.611473560333251953e+00, -3.579885244369506836e+00, -3.491834640502929688e+00, -1.981519341468811035e+00,
         -1.942641019821166992e+00, -1.932910561561584473e+00, -1.889171838760375977e+00, -1.838250041007995605e+00,
         -1.771490931510925293e+00, -1.748284816741943359e+00, -1.737872958183288574e+00, -1.687843561172485352e+00,
         -1.668373346328735352e+00, -1.645839214324951172e+00, -1.613288521766662598e+00, -1.598673701286315918e+00,
         -1.573379874229431152e+00, -1.560477375984191895e+00, -1.541429162025451660e+00, -1.506567239761352539e+00,
         -1.474407553672790527e+00, -9.240462779998779297e-01, -8.850798606872558594e-01, -8.798757195472717285e-01,
         -8.191457986831665039e-01, 4.239553511142730713e-01, 4.649005532264709473e-01, 4.707880914211273193e-01,
         5.033029913902282715e-01, 5.192956328392028809e-01, 5.443085432052612305e-01, 5.510154962539672852e-01,
         5.832155346870422363e-01, 6.165705919265747070e-01, 6.385440826416015625e-01, 6.931565403938293457e-01,
         7.308561801910400391e-01, 2.060234069824218750e+00, 2.090152978897094727e+00, 2.127028465270996094e+00,
         2.151748657226562500e+00, 2.165781497955322266e+00, 2.185339450836181641e+00, 2.197620630264282227e+00,
         2.221056222915649414e+00, 2.234183549880981445e+00, 2.250442981719970703e+00, 2.266506671905517578e+00,
         2.283741235733032227e+00, 2.323725700378417969e+00, 2.334869384765625000e+00, 2.338430881500244141e+00,
         2.347991228103637695e+00, 2.371416330337524414e+00, 2.379060983657836914e+00, 2.390759468078613281e+00,
         2.411683559417724609e+00, 2.439599275588989258e+00, 2.463473558425903320e+00, 2.482302665710449219e+00,
         2.510311365127563477e+00, 2.546224117279052734e+00, 2.561588525772094727e+00, 2.584127187728881836e+00,
         2.619183540344238281e+00, 2.665779590606689453e+00, 2.724364757537841797e+00, 3.183094024658203125e+00,
         3.192882299423217773e+00, 3.229941844940185547e+00, 3.245545625686645508e+00, 3.253541707992553711e+00,
         3.287797927856445312e+00, 4.071187496185302734e+00, 4.080585956573486328e+00, 4.126476287841796875e+00,
         4.171143531799316406e+00, 4.195070266723632812e+00, 4.209680557250976562e+00, 4.238818168640136719e+00,
         4.266224861145019531e+00, 4.280313968658447266e+00, 4.294821739196777344e+00, 4.317849159240722656e+00,
         4.349637985229492188e+00, 4.637475967407226562e+00, 4.675939083099365234e+00, 4.692891120910644531e+00,
         4.727426528930664062e+00, 4.753072738647460938e+00, 4.781555175781250000e+00, 4.802602291107177734e+00,
         4.813231468200683594e+00, 4.833333015441894531e+00, 4.863060474395751953e+00, 4.886991977691650391e+00,
         4.892057895660400391e+00, 4.927152156829833984e+00, 4.968517780303955078e+00, 4.980640411376953125e+00,
         4.992869853973388672e+00, 5.037042617797851562e+00, 5.051192283630371094e+00, 5.067148208618164062e+00,
         5.174748420715332031e+00, 6.408553600311279297e+00, 6.446281909942626953e+00, 6.547521591186523438e+00,
         8.246568679809570312e+00, 8.336483001708984375e+00, 8.439264297485351562e+00, 8.447793006896972656e+00,
         8.517030715942382812e+00, 8.544185638427734375e+00, 8.727850914001464844e+00, 8.739351272583007812e+00,
         8.743923187255859375e+00, 8.801937103271484375e+00, 9.189534187316894531e+00, 9.215620994567871094e+00,
         9.311632156372070312e+00, 9.348912239074707031e+00, 9.389204025268554688e+00, 9.429375648498535156e+00,
         9.506471633911132812e+00, 9.603069305419921875e+00, 9.633927345275878906e+00, 9.687004089355468750e+00,
         9.937701225280761719e+00, 9.996891021728515625e+00, 1.002287864685058594e+01, 1.005085372924804688e+01,
         1.012605476379394531e+01, 1.020290851593017578e+01, 1.021341514587402344e+01, 1.022026729583740234e+01,
         1.023352050781250000e+01, 1.024839782714843750e+01, 1.029476737976074219e+01, 1.034678745269775391e+01,
         1.144405174255371094e+01, 1.146269798278808594e+01, 1.151326274871826172e+01, 1.156742000579833984e+01,
         1.161628913879394531e+01, 1.164100646972656250e+01, 1.171443367004394531e+01, 1.173710823059082031e+01,
         1.179388141632080078e+01, 1.187089920043945312e+01, 1.189162063598632812e+01, 1.194771862030029297e+01,
         1.196213626861572266e+01, 1.202069282531738281e+01, 1.206715679168701172e+01, 1.211391735076904297e+01,
         1.214328670501708984e+01, 1.217701625823974609e+01, 1.224578857421875000e+01, 1.228487873077392578e+01,
         1.234558296203613281e+01, 1.239589977264404297e+01, 1.240434741973876953e+01, 1.244493198394775391e+01,
         1.247074127197265625e+01, 1.251434898376464844e+01, 1.272154712677001953e+01, 1.282615089416503906e+01,
         1.289316177368164062e+01, 1.290758705139160156e+01, 1.294966888427734375e+01, 1.297602462768554688e+01,
         1.301365566253662109e+01, 1.303663635253906250e+01, 1.307094764709472656e+01, 1.310464668273925781e+01,
         1.314669704437255859e+01, 1.317375659942626953e+01, 1.338929176330566406e+01, 1.343144989013671875e+01,
         1.344123935699462891e+01, 1.347281360626220703e+01, 1.351161766052246094e+01, 1.359416007995605469e+01,
         1.360778808593750000e+01, 1.365103530883789062e+01, 1.366891479492187500e+01, 1.369214534759521484e+01,
         1.376830291748046875e+01, 1.378303432464599609e+01, 1.391937923431396484e+01, 1.401801395416259766e+01,
         1.404294013977050781e+01, 1.410659122467041016e+01, 1.414638233184814453e+01, 1.415916538238525391e+01,
         1.420987510681152344e+01, 1.421712684631347656e+01, 1.429397201538085938e+01, 1.433316802978515625e+01,
         1.435651969909667969e+01, 1.442678260803222656e+01, 1.456269264221191406e+01, 1.462042331695556641e+01,
         1.467052459716796875e+01, 1.469609069824218750e+01, 1.476699066162109375e+01, 1.482291603088378906e+01,
         1.488200378417968750e+01, 1.493861007690429688e+01, 1.499141502380371094e+01, 1.501381683349609375e+01,
         1.507010841369628906e+01, 1.509423637390136719e+01, 1.513042068481445312e+01, 1.519160842895507812e+01,
         1.520294666290283203e+01, 1.521736240386962891e+01, 1.531451416015625000e+01, 1.539207935333251953e+01,
         1.542154407501220703e+01, 1.546704387664794922e+01, 1.548010253906250000e+01, 1.561412429809570312e+01,
         1.563678836822509766e+01, 1.568669414520263672e+01, 1.712630081176757812e+01, 1.714825630187988281e+01,
         1.720494079589843750e+01, 1.722904205322265625e+01, 1.726894187927246094e+01, 1.734113311767578125e+01,
         1.807992362976074219e+01, 1.809104919433593750e+01, 1.811190414428710938e+01, 1.813960266113281250e+01],
        dtype=np.float32)

    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=5e-3)


def test_band_false_overlap():
    jdata = normal_jdata
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/false_overlaps.h5"

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    try:
        bcal.get_bands(data=dataset[0],
                       kpath_kwargs=jdata["task_options"])
    except _LinAlgError as e:
        pass
    else:
        raise RuntimeError("false_overlap function normally.")

def test_band_override_overlap():
    jdata = normal_jdata
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/data/Si64.0/overlaps.h5"

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])

    expected_value_k1 = np.array(
        [-6.007875919342041016e+00, -5.030774593353271484e+00, -5.003971099853515625e+00, -4.952636718750000000e+00,
         -4.906136989593505859e+00, -4.881832122802734375e+00, -4.779191017150878906e+00, -4.095708847045898438e+00,
         -4.082863807678222656e+00, -4.049058914184570312e+00, -4.022160530090332031e+00, -4.004839897155761719e+00,
         -3.973747491836547852e+00, -3.951082468032836914e+00, -3.917235851287841797e+00, -3.863109350204467773e+00,
         -3.851795911788940430e+00, -3.823469400405883789e+00, -3.736619710922241211e+00, -3.655530691146850586e+00,
         -3.611234188079833984e+00, -3.580487728118896484e+00, -3.491930484771728516e+00, -1.981770038604736328e+00,
         -1.942627310752868652e+00, -1.933169603347778320e+00, -1.889327049255371094e+00, -1.838504314422607422e+00,
         -1.771142125129699707e+00, -1.749006152153015137e+00, -1.739029169082641602e+00, -1.687892794609069824e+00,
         -1.668704390525817871e+00, -1.646407604217529297e+00, -1.613863229751586914e+00, -1.599037170410156250e+00,
         -1.573451876640319824e+00, -1.560818076133728027e+00, -1.541956305503845215e+00, -1.506619453430175781e+00,
         -1.473241806030273438e+00, -9.234700202941894531e-01, -8.847742080688476562e-01, -8.798522353172302246e-01,
         -8.190817832946777344e-01, 4.236134290695190430e-01, 4.648336768150329590e-01, 4.706068038940429688e-01,
         5.031847357749938965e-01, 5.188313722610473633e-01, 5.440685153007507324e-01, 5.509728789329528809e-01,
         5.829192996025085449e-01, 6.164756417274475098e-01, 6.383926272392272949e-01, 6.926273107528686523e-01,
         7.304611802101135254e-01, 2.059183120727539062e+00, 2.089110851287841797e+00, 2.125465869903564453e+00,
         2.150959491729736328e+00, 2.164901971817016602e+00, 2.184677839279174805e+00, 2.196860551834106445e+00,
         2.221270561218261719e+00, 2.233224868774414062e+00, 2.250259399414062500e+00, 2.266435146331787109e+00,
         2.283138751983642578e+00, 2.324388742446899414e+00, 2.335093975067138672e+00, 2.339377880096435547e+00,
         2.348657846450805664e+00, 2.372289657592773438e+00, 2.380335092544555664e+00, 2.391067266464233398e+00,
         2.412565231323242188e+00, 2.440530776977539062e+00, 2.464379072189331055e+00, 2.483356475830078125e+00,
         2.511421918869018555e+00, 2.547412872314453125e+00, 2.562956094741821289e+00, 2.585044145584106445e+00,
         2.621452331542968750e+00, 2.668291807174682617e+00, 2.726045131683349609e+00, 3.183763265609741211e+00,
         3.193899869918823242e+00, 3.230939626693725586e+00, 3.246418476104736328e+00, 3.253779888153076172e+00,
         3.288106441497802734e+00, 4.074246406555175781e+00, 4.082398891448974609e+00, 4.129657268524169922e+00,
         4.174250602722167969e+00, 4.198284626007080078e+00, 4.212509632110595703e+00, 4.241652488708496094e+00,
         4.268248558044433594e+00, 4.283365249633789062e+00, 4.296683311462402344e+00, 4.320759296417236328e+00,
         4.349832057952880859e+00, 4.638844966888427734e+00, 4.675284862518310547e+00, 4.693801403045654297e+00,
         4.729039669036865234e+00, 4.752880573272705078e+00, 4.781517982482910156e+00, 4.804092407226562500e+00,
         4.814753055572509766e+00, 4.833251953125000000e+00, 4.863966464996337891e+00, 4.888625144958496094e+00,
         4.893781661987304688e+00, 4.928783893585205078e+00, 4.970149040222167969e+00, 4.982546806335449219e+00,
         4.993758678436279297e+00, 5.038577556610107422e+00, 5.054204463958740234e+00, 5.068173885345458984e+00,
         5.174584388732910156e+00, 6.397191047668457031e+00, 6.433865070343017578e+00, 6.531527519226074219e+00,
         8.273523330688476562e+00, 8.378067016601562500e+00, 8.444653511047363281e+00, 8.475384712219238281e+00,
         8.523569107055664062e+00, 8.565312385559082031e+00, 8.752090454101562500e+00, 8.781301498413085938e+00,
         8.796862602233886719e+00, 8.850741386413574219e+00, 9.187551498413085938e+00, 9.207848548889160156e+00,
         9.310987472534179688e+00, 9.345287322998046875e+00, 9.393698692321777344e+00, 9.432461738586425781e+00,
         9.490627288818359375e+00, 9.526630401611328125e+00, 9.593864440917968750e+00, 9.633745193481445312e+00,
         9.949315071105957031e+00, 1.002706527709960938e+01, 1.003830623626708984e+01, 1.007290840148925781e+01,
         1.014014244079589844e+01, 1.020450210571289062e+01, 1.020929336547851562e+01, 1.022571372985839844e+01,
         1.024356937408447266e+01, 1.025803565979003906e+01, 1.030322837829589844e+01, 1.035774993896484375e+01,
         1.145595455169677734e+01, 1.150102710723876953e+01, 1.156352710723876953e+01, 1.158399963378906250e+01,
         1.165499496459960938e+01, 1.167585086822509766e+01, 1.174493789672851562e+01, 1.174887084960937500e+01,
         1.181878757476806641e+01, 1.185863399505615234e+01, 1.189237403869628906e+01, 1.192882728576660156e+01,
         1.197041320800781250e+01, 1.201777553558349609e+01, 1.207122993469238281e+01, 1.214876270294189453e+01,
         1.217114162445068359e+01, 1.220375251770019531e+01, 1.226630878448486328e+01, 1.230327129364013672e+01,
         1.233079814910888672e+01, 1.239943122863769531e+01, 1.242937755584716797e+01, 1.245402145385742188e+01,
         1.246964740753173828e+01, 1.250883197784423828e+01, 1.273726463317871094e+01, 1.277889442443847656e+01,
         1.283018779754638672e+01, 1.286213874816894531e+01, 1.290408611297607422e+01, 1.291472816467285156e+01,
         1.294196128845214844e+01, 1.298290920257568359e+01, 1.298983001708984375e+01, 1.305589962005615234e+01,
         1.307344532012939453e+01, 1.312262439727783203e+01, 1.342292594909667969e+01, 1.344026851654052734e+01,
         1.345228195190429688e+01, 1.348766136169433594e+01, 1.352543544769287109e+01, 1.358737659454345703e+01,
         1.361264419555664062e+01, 1.363377475738525391e+01, 1.366132831573486328e+01, 1.367712783813476562e+01,
         1.374893283843994141e+01, 1.375715923309326172e+01, 1.395118999481201172e+01, 1.405923938751220703e+01,
         1.409231853485107422e+01, 1.413882350921630859e+01, 1.418365478515625000e+01, 1.419930171966552734e+01,
         1.423225021362304688e+01, 1.428639221191406250e+01, 1.430819511413574219e+01, 1.434034633636474609e+01,
         1.437681961059570312e+01, 1.444129657745361328e+01, 1.459426975250244141e+01, 1.469659709930419922e+01,
         1.472040271759033203e+01, 1.473761367797851562e+01, 1.478864288330078125e+01, 1.486089897155761719e+01,
         1.493906879425048828e+01, 1.501589298248291016e+01, 1.503198146820068359e+01, 1.507633018493652344e+01,
         1.513333225250244141e+01, 1.515059757232666016e+01, 1.521450424194335938e+01, 1.527194976806640625e+01,
         1.528341197967529297e+01, 1.531917476654052734e+01, 1.539455986022949219e+01, 1.546387386322021484e+01,
         1.552250385284423828e+01, 1.555275535583496094e+01, 1.558181285858154297e+01, 1.566563034057617188e+01,
         1.571693420410156250e+01, 1.580490207672119141e+01, 1.708510208129882812e+01, 1.712958526611328125e+01,
         1.718988800048828125e+01, 1.723310470581054688e+01, 1.726030158996582031e+01, 1.731511878967285156e+01,
         1.826096725463867188e+01, 1.827980804443359375e+01, 1.833175468444824219e+01, 1.835917472839355469e+01],
        dtype=np.float32)

    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=5e-3)
