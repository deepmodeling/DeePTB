import os
from pathlib import Path

import torch
from torch._C import _LinAlgError

from dptb.postprocess.bandstructure.band import Band
from dptb.utils.tools import j_loader
from dptb.nn.build import build_model
from dptb.data import build_dataset
import numpy as np

rootdir = os.path.join(Path(os.path.abspath(__file__)).parent, "data")

model = build_model(checkpoint=f"{rootdir}/e3_band/ref_model/nnenv.ep1474.pth")

# build the dataset from the model
dataset = build_dataset.from_model(
    model=model,
    root=f"{rootdir}/e3_band/data",
    prefix="Si64"
)

normal_jdata = {
        "task_options": {
            "task": "band",
            "kline_type":"abacus",
            "kpath":[[0.0000000000,   0.0000000000,   0.0000000000,   2],
                     [0.5000000000,   0.0000000000,   0.0000000000,   1],
                    ],
            "klabels":["G","X","Y","G","Z","R_2","G","T_2","U_2","G","V_2"],
            "nel_atom":{"Si":4},
            "E_fermi":0.0,
            "emin":-7,
            "emax":18
        },
        "device": "cuda"
    }


def test_normal_band():
    jdata = normal_jdata

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])

    expected_value_k1 = np.array(
        [-6.011351108551025391e+00, -5.037523269653320312e+00, -5.007966518402099609e+00, -4.955380439758300781e+00,
        -4.905107498168945312e+00, -4.884442329406738281e+00, -4.777526855468750000e+00, -4.100751399993896484e+00,
        -4.086483001708984375e+00, -4.052429676055908203e+00, -4.020671367645263672e+00, -4.005366802215576172e+00,
        -3.973261833190917969e+00, -3.950331449508666992e+00, -3.916294336318969727e+00, -3.862476110458374023e+00,
        -3.850628614425659180e+00, -3.824794054031372070e+00, -3.736525535583496094e+00, -3.653729438781738281e+00,
        -3.611713886260986328e+00, -3.580285549163818359e+00, -3.491735935211181641e+00, -1.981271624565124512e+00,
        -1.942953348159790039e+00, -1.932594180107116699e+00, -1.889401555061340332e+00, -1.838521718978881836e+00,
        -1.771664381027221680e+00, -1.747933149337768555e+00, -1.737430572509765625e+00, -1.688340425491333008e+00,
        -1.668553948402404785e+00, -1.645609855651855469e+00, -1.613248348236083984e+00, -1.599056839942932129e+00,
        -1.573463797569274902e+00, -1.560670375823974609e+00, -1.541508913040161133e+00, -1.505912780761718750e+00,
        -1.474475979804992676e+00, -9.239591956138610840e-01, -8.846855163574218750e-01, -8.795795440673828125e-01,
        -8.191431164741516113e-01, 4.242954552173614502e-01, 4.658488035202026367e-01, 4.708915352821350098e-01,
        5.038550496101379395e-01, 5.195844173431396484e-01, 5.446833372116088867e-01, 5.513212084770202637e-01,
        5.839257240295410156e-01, 6.171476244926452637e-01, 6.393530368804931641e-01, 6.930868029594421387e-01,
        7.312549352645874023e-01, 2.060453891754150391e+00, 2.089469671249389648e+00, 2.127025365829467773e+00,
        2.151679754257202148e+00, 2.165083408355712891e+00, 2.185543537139892578e+00, 2.197601556777954102e+00,
        2.221229553222656250e+00, 2.234497547149658203e+00, 2.250831604003906250e+00, 2.266334533691406250e+00,
        2.283460140228271484e+00, 2.324191570281982422e+00, 2.334488868713378906e+00, 2.339112043380737305e+00,
        2.347815275192260742e+00, 2.371786832809448242e+00, 2.379223585128784180e+00, 2.390631198883056641e+00,
        2.411910772323608398e+00, 2.440117359161376953e+00, 2.463692903518676758e+00, 2.482265233993530273e+00,
        2.510529279708862305e+00, 2.546297073364257812e+00, 2.561976432800292969e+00, 2.584925174713134766e+00,
        2.620382070541381836e+00, 2.666777849197387695e+00, 2.724891901016235352e+00, 3.182504653930664062e+00,
        3.192976474761962891e+00, 3.229659318923950195e+00, 3.245808601379394531e+00, 3.253908395767211914e+00,
        3.288335323333740234e+00, 4.070465087890625000e+00, 4.079986572265625000e+00, 4.126430988311767578e+00,
        4.170253753662109375e+00, 4.194656372070312500e+00, 4.208646774291992188e+00, 4.238544940948486328e+00,
        4.265445232391357422e+00, 4.280467987060546875e+00, 4.294728279113769531e+00, 4.318066120147705078e+00,
        4.348694324493408203e+00, 4.637664794921875000e+00, 4.675414562225341797e+00, 4.693270683288574219e+00,
        4.727496147155761719e+00, 4.753098964691162109e+00, 4.781199932098388672e+00, 4.802739143371582031e+00,
        4.813463687896728516e+00, 4.833774566650390625e+00, 4.863660812377929688e+00, 4.887650012969970703e+00,
        4.893188476562500000e+00, 4.927243232727050781e+00, 4.969316005706787109e+00, 4.981124877929687500e+00,
        4.993225574493408203e+00, 5.037048816680908203e+00, 5.052016735076904297e+00, 5.067711353302001953e+00,
        5.174075126647949219e+00, 6.409561157226562500e+00, 6.447214126586914062e+00, 6.547751426696777344e+00,
        8.256988525390625000e+00, 8.346458435058593750e+00, 8.449126243591308594e+00, 8.456901550292968750e+00,
        8.526693344116210938e+00, 8.553707122802734375e+00, 8.738372802734375000e+00, 8.750313758850097656e+00,
        8.753453254699707031e+00, 8.810757637023925781e+00, 9.182074546813964844e+00, 9.206726074218750000e+00,
        9.304991722106933594e+00, 9.352506637573242188e+00, 9.382905960083007812e+00, 9.434174537658691406e+00,
        9.504947662353515625e+00, 9.609397888183593750e+00, 9.637969970703125000e+00, 9.695457458496093750e+00,
        9.947966575622558594e+00, 1.000811672210693359e+01, 1.003531455993652344e+01, 1.006356334686279297e+01,
        1.014093589782714844e+01, 1.021236610412597656e+01, 1.022353458404541016e+01, 1.023188686370849609e+01,
        1.024329376220703125e+01, 1.025936985015869141e+01, 1.030026817321777344e+01, 1.035571002960205078e+01,
        1.146158790588378906e+01, 1.148221683502197266e+01, 1.153534412384033203e+01, 1.159055519104003906e+01,
        1.163656616210937500e+01, 1.166152572631835938e+01, 1.173101711273193359e+01, 1.175632095336914062e+01,
        1.180960559844970703e+01, 1.188117313385009766e+01, 1.189934444427490234e+01, 1.195705032348632812e+01,
        1.197438430786132812e+01, 1.203458786010742188e+01, 1.208120822906494141e+01, 1.213250160217285156e+01,
        1.216179275512695312e+01, 1.219351577758789062e+01, 1.226427936553955078e+01, 1.230437755584716797e+01,
        1.236388874053955078e+01, 1.241464805603027344e+01, 1.242142581939697266e+01, 1.246414566040039062e+01,
        1.248677444458007812e+01, 1.253444290161132812e+01, 1.273966217041015625e+01, 1.284275054931640625e+01,
        1.290920448303222656e+01, 1.291735935211181641e+01, 1.296068859100341797e+01, 1.299035644531250000e+01,
        1.302667236328125000e+01, 1.304711818695068359e+01, 1.308316802978515625e+01, 1.311537742614746094e+01,
        1.315704250335693359e+01, 1.318485355377197266e+01, 1.340021038055419922e+01, 1.344335460662841797e+01,
        1.345381259918212891e+01, 1.348142337799072266e+01, 1.352258396148681641e+01, 1.360352039337158203e+01,
        1.361951828002929688e+01, 1.366516590118408203e+01, 1.367792224884033203e+01, 1.370110988616943359e+01,
        1.377739906311035156e+01, 1.379620265960693359e+01, 1.394350051879882812e+01, 1.404150295257568359e+01,
        1.406597995758056641e+01, 1.412982177734375000e+01, 1.416878414154052734e+01, 1.418013572692871094e+01,
        1.423425292968750000e+01, 1.424432468414306641e+01, 1.431711673736572266e+01, 1.435321617126464844e+01,
        1.438184928894042969e+01, 1.445011711120605469e+01, 1.458213138580322266e+01, 1.463779830932617188e+01,
        1.468651390075683594e+01, 1.470986080169677734e+01, 1.478242588043212891e+01, 1.483624172210693359e+01,
        1.490111827850341797e+01, 1.495537853240966797e+01, 1.500714206695556641e+01, 1.503271389007568359e+01,
        1.508911037445068359e+01, 1.510595798492431641e+01, 1.514880752563476562e+01, 1.520375156402587891e+01,
        1.521881103515625000e+01, 1.522929954528808594e+01, 1.532804489135742188e+01, 1.540110683441162109e+01,
        1.543669033050537109e+01, 1.548472309112548828e+01, 1.549731349945068359e+01, 1.562314987182617188e+01,
        1.565222263336181641e+01, 1.569353008270263672e+01, 1.715448188781738281e+01, 1.717798042297363281e+01,
        1.722770500183105469e+01, 1.725421524047851562e+01, 1.729618835449218750e+01, 1.736883163452148438e+01,
        1.810172653198242188e+01, 1.811395263671875000e+01, 1.814074897766113281e+01, 1.816400146484375000e+01],
        dtype=np.float32)

    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=1e-4)


def test_band_false_overlap():
    jdata = normal_jdata
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/false_overlaps.h5"

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    try:
        bcal.get_bands(data=dataset[0],
                       kpath_kwargs=jdata["task_options"])
    except _LinAlgError as e:
        pass
    else:
        raise RuntimeError("false_overlap function normally.")

def test_band_override_overlap():
    jdata = normal_jdata
    jdata["task_options"]["override_overlap"] = f"{rootdir}/e3_band/data/Si64.0/overlaps.h5"

    bcal = Band(model=model,
                use_gui=False,
                results_path="./",
                device=model.device)

    eigenstatus = bcal.get_bands(data=dataset[0],
                                 kpath_kwargs=jdata["task_options"])

    expected_value_k1 = np.array(
        [-6.008349418640136719e+00, -5.030838489532470703e+00, -5.004353046417236328e+00, -4.953556060791015625e+00,
        -4.906186580657958984e+00, -4.881870269775390625e+00, -4.779483795166015625e+00, -4.096618175506591797e+00,
        -4.083540916442871094e+00, -4.049389839172363281e+00, -4.022074699401855469e+00, -4.004806041717529297e+00,
        -3.973377943038940430e+00, -3.951298713684082031e+00, -3.917955875396728516e+00, -3.863204956054687500e+00,
        -3.851416587829589844e+00, -3.824321985244750977e+00, -3.736663818359375000e+00, -3.655755996704101562e+00,
        -3.611509323120117188e+00, -3.580719232559204102e+00, -3.491512537002563477e+00, -1.981069445610046387e+00,
        -1.942634105682373047e+00, -1.932541370391845703e+00, -1.889551401138305664e+00, -1.838737964630126953e+00,
        -1.771141529083251953e+00, -1.748064994812011719e+00, -1.737959861755371094e+00, -1.688170194625854492e+00,
        -1.668885469436645508e+00, -1.645709514617919922e+00, -1.613710880279541016e+00, -1.599261283874511719e+00,
        -1.573487401008605957e+00, -1.560800075531005859e+00, -1.541486620903015137e+00, -1.505806088447570801e+00,
        -1.472969174385070801e+00, -9.236681461334228516e-01, -8.845410346984863281e-01, -8.795782327651977539e-01,
        -8.190985321998596191e-01, 4.239372909069061279e-01, 4.656426906585693359e-01, 4.708639085292816162e-01,
        5.036026239395141602e-01, 5.192972421646118164e-01, 5.444303154945373535e-01, 5.511708855628967285e-01,
        5.837457776069641113e-01, 6.169085502624511719e-01, 6.391945481300354004e-01, 6.926247477531433105e-01,
        7.307869791984558105e-01, 2.059213638305664062e+00, 2.088831424713134766e+00, 2.125754356384277344e+00,
        2.150577068328857422e+00, 2.164350271224975586e+00, 2.185073137283325195e+00, 2.196893215179443359e+00,
        2.221030712127685547e+00, 2.233278751373291016e+00, 2.250541448593139648e+00, 2.266657352447509766e+00,
        2.282957792282104492e+00, 2.324615240097045898e+00, 2.334631681442260742e+00, 2.339690446853637695e+00,
        2.348834276199340820e+00, 2.372634649276733398e+00, 2.380097389221191406e+00, 2.391153812408447266e+00,
        2.412480592727661133e+00, 2.441348791122436523e+00, 2.464484214782714844e+00, 2.482964277267456055e+00,
        2.511819124221801758e+00, 2.547837257385253906e+00, 2.563369035720825195e+00, 2.586110830307006836e+00,
        2.622361421585083008e+00, 2.669265747070312500e+00, 2.726806640625000000e+00, 3.182936906814575195e+00,
        3.193169355392456055e+00, 3.230177402496337891e+00, 3.245993375778198242e+00, 3.253795862197875977e+00,
        3.288295269012451172e+00, 4.073379993438720703e+00, 4.081552505493164062e+00, 4.129012107849121094e+00,
        4.173071861267089844e+00, 4.197326183319091797e+00, 4.211226463317871094e+00, 4.240968227386474609e+00,
        4.267261981964111328e+00, 4.282825469970703125e+00, 4.296437263488769531e+00, 4.320651531219482422e+00,
        4.348631381988525391e+00, 4.638336658477783203e+00, 4.675094604492187500e+00, 4.694187641143798828e+00,
        4.729206085205078125e+00, 4.752338409423828125e+00, 4.780669689178466797e+00, 4.804298400878906250e+00,
        4.814740657806396484e+00, 4.833157539367675781e+00, 4.863980293273925781e+00, 4.888901233673095703e+00,
        4.893889427185058594e+00, 4.928616523742675781e+00, 4.970199108123779297e+00, 4.982083797454833984e+00,
        4.993881702423095703e+00, 5.038837432861328125e+00, 5.054325103759765625e+00, 5.068175792694091797e+00,
        5.174029350280761719e+00, 6.397368907928466797e+00, 6.433168888092041016e+00, 6.530914783477783203e+00,
        8.276968955993652344e+00, 8.381623268127441406e+00, 8.448281288146972656e+00, 8.479790687561035156e+00,
        8.528079032897949219e+00, 8.569216728210449219e+00, 8.758078575134277344e+00, 8.789071083068847656e+00,
        8.802787780761718750e+00, 8.858177185058593750e+00, 9.188019752502441406e+00, 9.208794593811035156e+00,
        9.312170028686523438e+00, 9.351656913757324219e+00, 9.395036697387695312e+00, 9.437041282653808594e+00,
        9.495394706726074219e+00, 9.531430244445800781e+00, 9.600342750549316406e+00, 9.640388488769531250e+00,
        9.952652931213378906e+00, 1.003150177001953125e+01, 1.004406547546386719e+01, 1.007708835601806641e+01,
        1.014703273773193359e+01, 1.020685005187988281e+01, 1.021132850646972656e+01, 1.022955322265625000e+01,
        1.024777793884277344e+01, 1.026288127899169922e+01, 1.030685806274414062e+01, 1.036203098297119141e+01,
        1.145735836029052734e+01, 1.150308704376220703e+01, 1.156486320495605469e+01, 1.158536338806152344e+01,
        1.165612220764160156e+01, 1.167688560485839844e+01, 1.174657344818115234e+01, 1.174884605407714844e+01,
        1.182141399383544922e+01, 1.186017417907714844e+01, 1.189385890960693359e+01, 1.192863178253173828e+01,
        1.197172832489013672e+01, 1.202028942108154297e+01, 1.206970596313476562e+01, 1.215124607086181641e+01,
        1.217511081695556641e+01, 1.220413780212402344e+01, 1.226726818084716797e+01, 1.230435657501220703e+01,
        1.233074855804443359e+01, 1.240173912048339844e+01, 1.243035984039306641e+01, 1.245336818695068359e+01,
        1.247198390960693359e+01, 1.251031589508056641e+01, 1.274326992034912109e+01, 1.279026222229003906e+01,
        1.283712005615234375e+01, 1.286871337890625000e+01, 1.291255950927734375e+01, 1.291977500915527344e+01,
        1.294722652435302734e+01, 1.298796844482421875e+01, 1.299739456176757812e+01, 1.306390476226806641e+01,
        1.308006000518798828e+01, 1.313043117523193359e+01, 1.342421245574951172e+01, 1.344139289855957031e+01,
        1.345125579833984375e+01, 1.348680877685546875e+01, 1.352400875091552734e+01, 1.358734226226806641e+01,
        1.361359500885009766e+01, 1.363450431823730469e+01, 1.366233158111572266e+01, 1.367791652679443359e+01,
        1.374961662292480469e+01, 1.375840568542480469e+01, 1.395683670043945312e+01, 1.406413173675537109e+01,
        1.409949302673339844e+01, 1.414409065246582031e+01, 1.419171142578125000e+01, 1.420495510101318359e+01,
        1.424007320404052734e+01, 1.429556369781494141e+01, 1.431383895874023438e+01, 1.434637451171875000e+01,
        1.438389015197753906e+01, 1.444604778289794922e+01, 1.459954738616943359e+01, 1.469787502288818359e+01,
        1.472342777252197266e+01, 1.474088668823242188e+01, 1.479211902618408203e+01, 1.486346817016601562e+01,
        1.494139003753662109e+01, 1.501796340942382812e+01, 1.503686046600341797e+01, 1.508007335662841797e+01,
        1.513378810882568359e+01, 1.515264987945556641e+01, 1.521763324737548828e+01, 1.528015518188476562e+01,
        1.528435897827148438e+01, 1.532157516479492188e+01, 1.539886188507080078e+01, 1.546576213836669922e+01,
        1.552355670928955078e+01, 1.555761718750000000e+01, 1.558191204071044922e+01, 1.566560935974121094e+01,
        1.571952438354492188e+01, 1.580580234527587891e+01, 1.708813095092773438e+01, 1.713279724121093750e+01,
        1.719160652160644531e+01, 1.723346138000488281e+01, 1.726149177551269531e+01, 1.731848526000976562e+01,
        1.827014350891113281e+01, 1.828803825378417969e+01, 1.834057617187500000e+01, 1.836823844909667969e+01],
        dtype=np.float32)

    assert np.allclose(eigenstatus["eigenvalues"][0], expected_value_k1, atol=1e-4)
