import pytest
from dptb.nn.build import build_model
from dptb.postprocess.bandstructure.band import Band
import os
from pathlib import Path
import numpy as np

rootdir = os.path.join(Path(os.path.abspath(__file__)).parent, "data")

class TestV1Json:
    run_opt = {
            "init_model": f"{rootdir}/json_model/AlAs_v1_nnsk_b5.200_c4.200_w0.200.json",
            "restart": None,
            "freeze": False,
            "train_soc": False,
            "log_path": None,
            "log_level": None
        }

    model_option = {
        "nnsk": {
            "onsite": {"method": "uniform"},
            "hopping": {"method": "powerlaw", "rs":4.2, "w": 0.2},
            "push": False,
            "freeze": False
        }
    }
    common_options = {
    "basis": {
        "As": ["4s","4p","d*"],
        "Al": ["3s","3p","d*"]
    },
    "device": "cpu",
    "dtype": "float32",
    "overlap": False
    }

    jdata={   
    "task_options": {
        "task": "band",
        "kline_type":"abacus",
        "kpath":[[0.0000000000,   0.0000000000,   0.0000000000,   2],   
                 [0.5000000000,   0.0000000000,   0.5000000000,   2],               
                 [0.6250000000,   0.2500000000,   0.6250000000,   1],    
                 [0.3750000000,   0.3750000000,   0.7500000000,   2],     
                 [0.0000000000,   0.0000000000,   0.0000000000,   2],    
                 [0.5000000000,   0.5000000000,   0.5000000000,   2],                
                 [0.5000000000,   0.2500000000,   0.7500000000,   2],               
                 [0.5000000000,   0.0000000000,   0.5000000000,   1 ]
                 ],
        "klabels":['G','X','U','K','G','L','W','X'],
        "E_fermi":-9.307,
        "emin":-15,
        "emax":10    }
    }
       

    def test_bands(self):
        model = build_model(self.run_opt, self.model_option, self.common_options)
 
        kpath_kwargs = self.jdata["task_options"]
        bcal = Band(model=model, 
            use_gui=True, 
            results_path=f'{rootdir}/out', 
            device=model.device)

        stru_data = f"{rootdir}/json_model/AlAs.vasp"
        AtomicData_options = {"r_max": 5.2, "pbc": True}

        eigenstatus = bcal.get_bands(data=stru_data, 
               kpath_kwargs=kpath_kwargs, 
               AtomicData_options=AtomicData_options)
        
        expected_bands =np.array([[-2.48727150e+01, -1.29382324e+01, -1.29382257e+01, -1.29382229e+01, -1.10868120e+01, -8.07862854e+00, -8.07862568e+00, -8.07861805e+00,  9.56408596e+00,  9.56408691e+00,  1.25271873e+01,  1.25271950e+01,  1.25271978e+01,  4.23655891e+01,  4.23656044e+01,  4.32170753e+01,  4.32170792e+01,  4.32170868e+01],
             [-2.41187267e+01, -1.61148472e+01, -1.42793083e+01, -1.42793045e+01, -1.03604565e+01, -8.68612957e+00, -5.90628624e+00, -5.90628576e+00,  2.25617599e+00,  5.51729870e+00,  5.51730347e+00,  5.61441135e+00,  5.90860081e+00,  2.50449829e+01,  2.82622643e+01,  2.82622776e+01,  2.84239502e+01,  3.07470131e+01],
             [-2.29336300e+01, -1.85238571e+01, -1.51972685e+01, -1.51972666e+01, -1.13513584e+01, -1.05228834e+01, -2.21334386e+00, -2.21334243e+00, -3.03742558e-01, -3.03741843e-01, -9.65526607e-03,  8.24528575e-01,  1.84810734e+00,  7.89270067e+00,  1.01749058e+01,  1.01749077e+01,  1.34912348e+01,  1.40874834e+01],
             [-2.29474239e+01, -1.84172096e+01, -1.56978197e+01, -1.50829716e+01, -1.10063257e+01, -9.69069576e+00, -2.91590619e+00, -2.64113235e+00, -1.43450952e+00, -4.38025206e-01,  1.01333761e+00,  1.07858098e+00,  3.61593747e+00,  7.17037296e+00,  9.29849529e+00,  1.00337200e+01,  1.38197346e+01,  1.42732258e+01],
             [-2.30109138e+01, -1.81435585e+01, -1.63736401e+01, -1.47889500e+01, -1.06536665e+01, -7.59100485e+00, -4.40897274e+00, -4.01978016e+00, -1.59141457e+00, -8.14805627e-02,  1.07713044e+00,  2.36757493e+00,  6.39950705e+00,  6.44096851e+00,  8.05662537e+00,  1.10570469e+01,  1.42302742e+01,  1.53123789e+01],
             [-2.30108986e+01, -1.81435699e+01, -1.63736362e+01, -1.47889528e+01, -1.06536646e+01, -7.59101057e+00, -4.40896845e+00, -4.01978016e+00, -1.59141552e+00, -8.14811662e-02,  1.07712996e+00,  2.36757469e+00,  6.39950800e+00,  6.44096851e+00,  8.05662632e+00,  1.10570469e+01,  1.42302704e+01,  1.53123856e+01],
             [-2.40611782e+01, -1.67647114e+01, -1.50329933e+01, -1.34557276e+01, -9.01750469e+00, -7.44570971e+00, -7.16721439e+00, -6.34023905e+00,  2.99699736e+00,  3.46649384e+00,  4.46376228e+00,  5.20905399e+00,  7.82006931e+00,  2.53436356e+01,  2.59452019e+01,  2.75783978e+01,  2.84669800e+01,  2.92158451e+01],
             [-2.48727150e+01, -1.29382324e+01, -1.29382257e+01, -1.29382229e+01, -1.10868120e+01, -8.07862854e+00, -8.07862568e+00, -8.07861805e+00,  9.56408596e+00,  9.56408691e+00,  1.25271873e+01,  1.25271950e+01,  1.25271978e+01,  4.23655891e+01,  4.23656044e+01,  4.32170753e+01,  4.32170792e+01,  4.32170868e+01],
             [-2.43790150e+01, -1.64551792e+01, -1.34435387e+01, -1.34435349e+01, -1.03514795e+01, -7.39460945e+00, -7.39460516e+00, -6.10483932e+00,  4.67000580e+00,  4.67000914e+00,  6.74771929e+00,  6.74772310e+00,  9.39733410e+00,  3.10563354e+01,  3.10563450e+01,  3.17371826e+01,  3.17371864e+01,  3.35946846e+01],
             [-2.35396881e+01, -1.85059109e+01, -1.37993116e+01, -1.37993116e+01, -1.08380241e+01, -7.56033421e+00, -7.56033087e+00, -3.32421374e+00, -4.98459250e-01, -4.98458147e-01,  4.68962049e+00,  4.68962288e+00,  7.64235640e+00,  1.68248940e+01,  1.68248997e+01,  2.04327011e+01,  2.04327030e+01,  2.12005653e+01],
             [-2.31961079e+01, -1.82634125e+01, -1.56346197e+01, -1.44923830e+01, -9.23417282e+00, -7.92826271e+00, -5.95008469e+00, -4.99026012e+00, -1.32351279e+00, -5.01590669e-01,  2.95195317e+00,  4.62497950e+00,  5.44099808e+00,  1.17575951e+01,  1.19310246e+01,  1.50337820e+01,  1.79441051e+01,  1.80985184e+01],
             [-2.29424934e+01, -1.80575047e+01, -1.62370167e+01, -1.56745434e+01, -8.23033428e+00, -7.16741085e+00, -6.62496185e+00, -5.73856449e+00, -1.48688376e+00,  1.80971527e+00,  2.45554900e+00,  3.85232139e+00,  4.23087120e+00,  5.92445564e+00,  6.44421244e+00,  8.21325207e+00,  1.44543571e+01,  1.44987440e+01],
             [-2.29404392e+01, -1.83383312e+01, -1.57138681e+01, -1.54623451e+01, -1.01436739e+01, -9.37874889e+00, -4.06893778e+00, -3.25271797e+00, -1.23538244e+00, -4.17988628e-01,  1.19791162e+00,  2.69611549e+00,  3.94141436e+00,  6.43033361e+00,  8.37113857e+00,  9.67157173e+00,  1.41308174e+01,  1.42368813e+01],
             [-2.29336300e+01, -1.85238571e+01, -1.51972685e+01, -1.51972666e+01, -1.13513584e+01, -1.05228834e+01, -2.21334386e+00, -2.21334243e+00, -3.03742558e-01, -3.03741843e-01, -9.65526607e-03,  8.24528575e-01,  1.84810734e+00,  7.89270067e+00,  1.01749058e+01,  1.01749077e+01,  1.34912348e+01,  1.40874834e+01]])

        assert np.allclose(eigenstatus["eigenvalues"], expected_bands, atol=1e-4)