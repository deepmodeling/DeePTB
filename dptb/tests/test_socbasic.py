import pytest
import torch

from dptb.nn.sktb.socbasic import creat_basis_lm, get_matrix_lmbasis
from dptb.nn.sktb.socbasic import lm2cubic_mat,get_soc_matrix_cubic_basis

def test_creat_basis():
    assert creat_basis_lm('s') == [[0, 0, 1], [0, 0, -1]]
    assert creat_basis_lm('p') == [[1, -1,  1], 
                                   [1, -1, -1], 
                                   [1,  0,  1], 
                                   [1,  0, -1],
                                   [1,  1,  1], 
                                   [1,  1, -1]]
    assert creat_basis_lm('d') == [[2, -2,  1],
                                   [2, -2, -1],
                                   [2, -1,  1],
                                   [2, -1, -1],
                                   [2,  0,  1],
                                   [2,  0, -1],
                                   [2,  1,  1],
                                   [2,  1, -1],
                                   [2,  2,  1],
                                   [2,  2, -1]]

    with pytest.raises(AssertionError):
        creat_basis_lm('f')
        creat_basis_lm('g')
        creat_basis_lm('2p')


def test_get_matrix_lmbasis():
    t2 = torch.tensor(2.0)
    s2_1=1.0/torch.sqrt(t2)

    mat = get_matrix_lmbasis(creat_basis_lm('s'))
    assert (mat == 0).all()

    mat = get_matrix_lmbasis(creat_basis_lm('p'))

    Mat_true = torch.tensor([[-0.5000,  0.0000,  0.0000,  s2_1,  0.0000,  0.0000],
                             [ 0.0000,  0.5000,  0.0000,  0.0000,  0.0000,  0.0000],
                             [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  s2_1],
                             [ s2_1,    0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
                             [ 0.0000,  0.0000,  0.0000,  0.0000,  0.5000,  0.0000],
                             [ 0.0000,  0.0000,  s2_1,    0.0000,  0.0000, -0.5000]])

    assert (mat == Mat_true).all()
    Mat_sign  = torch.tensor([[-1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                              [ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                              [ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.],
                              [ 1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.],
                              [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.],
                              [ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
                              [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  1.],
                              [ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.],
                              [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.],
                              [ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]])
    Mat_true_2 = torch.tensor([[4.0000, 0.0000, 0.0000, 4.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
                               [0.0000, 4.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,0.0000],
                               [0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 6.0000, 0.0000, 0.0000, 0.0000,0.0000],
                               [4.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,0.0000],
                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 6.0000, 0.0000,0.0000],
                               [0.0000, 0.0000, 6.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,0.0000],
                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000,4.0000],
                               [0.0000, 0.0000, 0.0000, 0.0000, 6.0000, 0.0000, 0.0000, 1.0000, 0.0000,0.0000],
                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 4.0000,0.0000],
                               [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 4.0000, 0.0000, 0.0000,4.0000]])
    Mat_true = Mat_sign * torch.sqrt(Mat_true_2)/2.0

    mat = get_matrix_lmbasis(creat_basis_lm('d'))

    assert (mat == Mat_true).all()

def test_lm2cubic_mat():
    t2 = torch.tensor(2.0)
    s2_1=1.0/torch.sqrt(t2)

    assert lm2cubic_mat([0],[0]) == torch.tensor([[1.+0.j]])
    mat = lm2cubic_mat([0,1,-1],[-1,0,1])
    
    mat_true = torch.tensor([[ 0.0000,      1.0000,  0.0000],
                             [ s2_1,        0.0000, -s2_1],
                             [ 1.0j*s2_1,   0.0000,  1.0j*s2_1]])
    assert (mat == mat_true).all()

    mat = (lm2cubic_mat([0,1,-1,2,-2],[-2,-1,0,1,2]))

    mat_true = torch.tensor([[ 0.0000+0.0000j,  0.0000+0.0000j,  1.0000+0.0000j,  0.0000+0.0000j, 0.0000+0.0000j],
                             [ 0.0000+0.0000j,  s2_1,            0.0000+0.0000j,  -s2_1,          0.0000+0.0000j],
                             [ 0.0000+0.0000j,  1.0j*s2_1,       0.0000+0.0000j,  1.0j*s2_1,      0.0000+0.0000j],
                             [ s2_1 + 0.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j, s2_1 + 0.0000j],
                             [ 1.0j*s2_1,       0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j, -1.0j*s2_1]])
    assert (mat == mat_true).all()

    with pytest.raises(AssertionError):
        lm2cubic_mat([0,1,-1,2],[-2,-1,0,1,2])
        lm2cubic_mat([0,1],[-2,-1,0,1,2])
        lm2cubic_mat([0,1,-1,2],[-2,0,1,2])


def test_get_soc_matrix_cubic_basis():
    mat = get_soc_matrix_cubic_basis(orbital='s')
    assert(mat == 0).all()

    mat = get_soc_matrix_cubic_basis(orbital='p',cubic_mag_num=[0,1,-1])
    mat_true = torch.tensor([[ 0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j, -1.0000+0.0000j,  0.0000+1.0000j],
                             [ 0.0000+0.0000j,  0.0000+0.0000j,  0.0000-1.0000j,  1.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j],
                             [ 0.0000+0.0000j,  0.0000+1.0000j,  0.0000+0.0000j,  0.0000-1.0000j,  0.0000+0.0000j,  0.0000+0.0000j],
                             [ 0.0000+0.0000j,  1.0000+0.0000j,  0.0000+1.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j],
                             [-1.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+1.0000j],
                             [ 0.0000-1.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000+0.0000j,  0.0000-1.0000j,  0.0000+0.0000j]],dtype=torch.complex64)
    mat_true = mat_true/2.0 
    assert (torch.abs(mat-mat_true) < 1e-6).all()

    mat = get_soc_matrix_cubic_basis(orbital='d',cubic_mag_num=[0,1,-1,2,-2])


    mat_true = torch.tensor([[ 0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
         -8.6603e-01+0.0000j,  0.0000e+00+0.8660j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j],
        [ 0.0000e+00+0.0000j,  6.3440e-09+0.0000j,  0.0000e+00-0.5000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  8.6603e-01+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j, -5.0000e-01+0.0000j,
          0.0000e+00+0.5000j],
        [ 0.0000e+00+0.0000j,  0.0000e+00+0.5000j,  6.3440e-09+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00-0.8660j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00-0.5000j,
         -5.0000e-01+0.0000j],
        [ 0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          1.2688e-08+0.0000j,  0.0000e+00-1.0000j,  0.0000e+00+0.0000j,
          5.0000e-01+0.0000j,  0.0000e+00+0.5000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j],
        [ 0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+1.0000j,  1.2688e-08+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00-0.5000j,  5.0000e-01+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j],
        [ 0.0000e+00+0.0000j,  8.6603e-01+0.0000j,  0.0000e+00+0.8660j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j],
        [-8.6603e-01+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          5.0000e-01+0.0000j,  0.0000e+00+0.5000j,  0.0000e+00+0.0000j,
         -6.3440e-09+0.0000j,  0.0000e+00+0.5000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j],
        [ 0.0000e+00-0.8660j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00-0.5000j,  5.0000e-01+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00-0.5000j, -6.3440e-09+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j],
        [ 0.0000e+00+0.0000j, -5.0000e-01+0.0000j,  0.0000e+00+0.5000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j, -1.2688e-08+0.0000j,
          0.0000e+00+1.0000j],
        [ 0.0000e+00+0.0000j,  0.0000e+00-0.5000j, -5.0000e-01+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00+0.0000j,
          0.0000e+00+0.0000j,  0.0000e+00+0.0000j,  0.0000e+00-1.0000j,
         -1.2688e-08+0.0000j]])

    assert (torch.abs(mat-mat_true) < 1e-4).all()
